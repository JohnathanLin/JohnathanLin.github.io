<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Note on WindyPath - Study And Practice, Years Of It</title>
    <link>https://windypath.com/en/categories/note/</link>
    <description>Recent content in Note on WindyPath - Study And Practice, Years Of It</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Windypath 风萧古道 **For Chinese Software**. [闽ICP备15016446号-3](https://beian.miit.gov.cn/)</copyright>
    <lastBuildDate>Mon, 04 Dec 2023 17:27:44 +0800</lastBuildDate><atom:link href="https://windypath.com/en/categories/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Various Locking Mechanisms in Java Concurrency Programming</title>
      <link>https://windypath.com/en/posts/java_juc_briefly/</link>
      <pubDate>Mon, 04 Dec 2023 17:27:44 +0800</pubDate>
      
      <guid>https://windypath.com/en/posts/java_juc_briefly/</guid>
      <description>Introduction: This article aims to introduce the relevant usage of synchronized, ReentrantLock, and Condition in Java.
Locking with Synchronized Synchronized can be applied to instance methods, static methods, and code blocks. When used to modify a code block, it can either lock on a specific object or on a class (.class).
Synchronized is a Non-Fair Lock The following code utilizes synchronized to lock on a variable accessible by multiple threads, achieving the orderly printing of numbers.</description>
    </item>
    
  </channel>
</rss>
